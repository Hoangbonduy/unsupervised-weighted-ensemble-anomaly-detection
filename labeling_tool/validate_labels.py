#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Label Validation Script
Script ki·ªÉm tra v√† validate c√°c file nh√£n
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime

def validate_label_files():
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c√°c file nh√£n"""
    
    # Load d·ªØ li·ªáu g·ªëc
    data_path = "data/Place_view_processed.csv"
    if not os.path.exists(data_path):
        print(f"Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu: {data_path}")
        return
    
    df = pd.read_csv(data_path)
    df['date'] = pd.to_datetime(df['date'])
    place_ids = df['placeId'].unique()
    
    labels_dir = "labels"
    if not os.path.exists(labels_dir):
        print(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c nh√£n: {labels_dir}")
        return
    
    print("=== KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ C·ª¶A C√ÅC FILE NH√ÉN ===\n")
    
    valid_files = 0
    invalid_files = 0
    missing_files = 0
    
    for place_id in place_ids:
        print(f"Ki·ªÉm tra Place ID: {place_id}")
        
        # Load d·ªØ li·ªáu g·ªëc cho place n√†y
        place_data = df[df['placeId'] == place_id].copy()
        place_data = place_data.sort_values('date')
        
        # T√¨m file nh√£n
        label_file = os.path.join(labels_dir, f"label_{place_id}.csv")
        
        if not os.path.exists(label_file):
            print(f"  ‚ùå Kh√¥ng t√¨m th·∫•y file nh√£n: {label_file}")
            missing_files += 1
            continue
        
        try:
            # Load file nh√£n
            label_df = pd.read_csv(label_file)
            
            print(f"  üìÅ File nh√£n: {label_file}")
            print(f"  üìä C·∫•u tr√∫c: {list(label_df.columns)}")
            print(f"  üìè S·ªë d√≤ng: {len(label_df)}")
            
            # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
            has_issues = False
            
            if 'label' not in label_df.columns:
                print(f"  ‚ö†Ô∏è  Thi·∫øu c·ªôt 'label'")
                has_issues = True
            else:
                # Ki·ªÉm tra gi√° tr·ªã nh√£n
                unique_labels = label_df['label'].unique()
                valid_labels = all(label in [0, 1] for label in unique_labels)
                if not valid_labels:
                    print(f"  ‚ö†Ô∏è  Nh√£n kh√¥ng h·ª£p l·ªá: {unique_labels} (ch·ªâ ch·∫•p nh·∫≠n 0 v√† 1)")
                    has_issues = True
                else:
                    anomaly_count = (label_df['label'] == 1).sum()
                    anomaly_ratio = anomaly_count / len(label_df) * 100
                    print(f"  ‚úÖ Nh√£n h·ª£p l·ªá: {anomaly_count}/{len(label_df)} anomalies ({anomaly_ratio:.1f}%)")
            
            # Ki·ªÉm tra ƒë·ªô d√†i
            if len(label_df) != len(place_data):
                print(f"  ‚ö†Ô∏è  ƒê·ªô d√†i kh√¥ng kh·ªõp: nh√£n={len(label_df)}, d·ªØ li·ªáu={len(place_data)}")
                has_issues = True
            else:
                print(f"  ‚úÖ ƒê·ªô d√†i kh·ªõp: {len(label_df)} ƒëi·ªÉm")
            
            # Ki·ªÉm tra th·ªùi gian (n·∫øu c√≥)
            if 'date' in label_df.columns:
                label_df['date'] = pd.to_datetime(label_df['date'])
                
                # Ki·ªÉm tra th·ª© t·ª± th·ªùi gian
                is_sorted = label_df['date'].is_monotonic_increasing
                if not is_sorted:
                    print(f"  ‚ö†Ô∏è  Th·ªùi gian kh√¥ng ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª±")
                    has_issues = True
                else:
                    print(f"  ‚úÖ Th·ªùi gian ƒë√£ s·∫Øp x·∫øp ƒë√∫ng")
                
                # Ki·ªÉm tra kho·∫£ng th·ªùi gian
                label_start = label_df['date'].min()
                label_end = label_df['date'].max()
                data_start = place_data['date'].min()
                data_end = place_data['date'].max()
                
                print(f"  üìÖ Kho·∫£ng th·ªùi gian nh√£n: {label_start.date()} ƒë·∫øn {label_end.date()}")
                print(f"  üìÖ Kho·∫£ng th·ªùi gian d·ªØ li·ªáu: {data_start.date()} ƒë·∫øn {data_end.date()}")
                
                if label_start.date() != data_start.date() or label_end.date() != data_end.date():
                    print(f"  ‚ö†Ô∏è  Kho·∫£ng th·ªùi gian kh√¥ng kh·ªõp")
                    has_issues = True
                else:
                    print(f"  ‚úÖ Kho·∫£ng th·ªùi gian kh·ªõp")
            
            # T·ªïng k·∫øt cho place n√†y
            if has_issues:
                print(f"  ‚ùå Place {place_id}: C√ì V·∫§N ƒê·ªÄ")
                invalid_files += 1
            else:
                print(f"  ‚úÖ Place {place_id}: H·ª¢P L·ªÜ")
                valid_files += 1
                
        except Exception as e:
            print(f"  ‚ùå L·ªói khi ƒë·ªçc file: {e}")
            invalid_files += 1
        
        print("-" * 50)
    
    # T·ªïng k·∫øt
    total_places = len(place_ids)
    print(f"\n=== T·ªîNG K·∫æT ===")
    print(f"T·ªïng s·ªë places: {total_places}")
    print(f"File nh√£n h·ª£p l·ªá: {valid_files}")
    print(f"File nh√£n c√≥ v·∫•n ƒë·ªÅ: {invalid_files}")
    print(f"File nh√£n thi·∫øu: {missing_files}")
    
    if missing_files > 0:
        print(f"\n‚ö†Ô∏è  C√≥ {missing_files} places ch∆∞a c√≥ file nh√£n!")
        print("Ch·∫°y script sau ƒë·ªÉ t·∫°o nh√£n m·∫∑c ƒë·ªãnh:")
        print("python simple_labeling.py")
    
    if invalid_files > 0:
        print(f"\n‚ö†Ô∏è  C√≥ {invalid_files} file nh√£n c√≥ v·∫•n ƒë·ªÅ!")
        print("Vui l√≤ng ki·ªÉm tra v√† s·ª≠a c√°c file tr√™n.")
    
    if valid_files == total_places:
        print(f"\nüéâ T·∫•t c·∫£ {total_places} file nh√£n ƒë·ªÅu h·ª£p l·ªá!")

def show_label_statistics():
    """Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan v·ªÅ nh√£n"""
    
    labels_dir = "data/labels"
    if not os.path.exists(labels_dir):
        print(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c nh√£n: {labels_dir}")
        return
    
    print("=== TH·ªêNG K√ä NH√ÉN T·ªîNG QUAN ===\n")
    
    label_files = [f for f in os.listdir(labels_dir) if f.startswith('label_') and f.endswith('.csv')]
    
    if not label_files:
        print("Kh√¥ng t√¨m th·∫•y file nh√£n n√†o!")
        return
    
    total_points = 0
    total_anomalies = 0
    anomaly_ratios = []
    
    for label_file in label_files:
        try:
            file_path = os.path.join(labels_dir, label_file)
            df = pd.read_csv(file_path)
            
            if 'label' in df.columns:
                points = len(df)
                anomalies = (df['label'] == 1).sum()
                ratio = anomalies / points * 100 if points > 0 else 0
                
                total_points += points
                total_anomalies += anomalies
                anomaly_ratios.append(ratio)
                
                place_id = label_file.replace('label_', '').replace('.csv', '')
                print(f"Place {place_id}: {anomalies}/{points} anomalies ({ratio:.1f}%)")
        
        except Exception as e:
            print(f"L·ªói ƒë·ªçc {label_file}: {e}")
    
    if total_points > 0:
        overall_ratio = total_anomalies / total_points * 100
        avg_ratio = np.mean(anomaly_ratios)
        std_ratio = np.std(anomaly_ratios)
        
        print(f"\n=== T·ªîNG K·∫æT ===")
        print(f"T·ªïng s·ªë ƒëi·ªÉm: {total_points:,}")
        print(f"T·ªïng s·ªë anomalies: {total_anomalies:,}")
        print(f"T·ª∑ l·ªá anomaly t·ªïng: {overall_ratio:.2f}%")
        print(f"T·ª∑ l·ªá anomaly trung b√¨nh: {avg_ratio:.2f}% ¬± {std_ratio:.2f}%")
        print(f"T·ª∑ l·ªá anomaly min: {min(anomaly_ratios):.2f}%")
        print(f"T·ª∑ l·ªá anomaly max: {max(anomaly_ratios):.2f}%")

def main():
    """Menu ch√≠nh"""
    print("=== C√îNG C·ª§ KI·ªÇM TRA NH√ÉN ===")
    
    while True:
        print("\nL·ª±a ch·ªçn:")
        print("1. Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file nh√£n")
        print("2. Hi·ªÉn th·ªã th·ªëng k√™ nh√£n")
        print("3. Tho√°t")
        
        choice = input("Ch·ªçn (1-3): ").strip()
        
        if choice == '1':
            validate_label_files()
        elif choice == '2':
            show_label_statistics()
        elif choice == '3':
            print("T·∫°m bi·ªát!")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
